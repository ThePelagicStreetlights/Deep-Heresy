# [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < f32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_obj_trans2D_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : * mut sys :: godot_object , arg3 : Transform2D , arg4 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3arr_obj_bool_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector3 > , arg1 : * mut sys :: godot_object , arg2 : bool , arg3 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__plane (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Plane ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec3_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector3 , arg2 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < i32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_i64_arr_i64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : i64 , arg2 : VariantArray , arg3 : i64 , arg4 : bool , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : f64 , arg2 : f64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_f64_f64_f64_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_dict (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Dictionary ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__aabb_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Aabb , arg1 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_obj_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : * mut sys :: godot_object , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__dict_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Dictionary , arg1 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_bool_i64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : bool , arg3 : i64 , arg4 : f64 , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bytearr_bytearr_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < u8 > , arg2 : PoolArray < u8 > , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__arr_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : VariantArray , arg1 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_f64_f64_bool_f64_f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : f64 , arg3 : f64 , arg4 : bool , arg5 : f64 , arg6 : f64 , arg7 : f64 , arg8 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 9usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_aabb (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Aabb ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_vec3_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Vector3 , arg3 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_f64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : f64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_basis (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Basis ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_str_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : GodotString , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector3 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_colorarr_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : PoolArray < Color > , arg2 : f64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_colorarr_vec2arr_obj_f64_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : PoolArray < Color > , arg2 : PoolArray < Vector2 > , arg3 : * mut sys :: godot_object , arg4 : f64 , arg5 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = Variant :: from_object_ptr (arg5) ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_obj_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : * mut sys :: godot_object , arg2 : GodotString , arg3 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bool_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : bool , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_nodepath_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : NodePath , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_vec2_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : Vector2 , arg2 : f64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_trans2D_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Transform2D , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__nodepath_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : NodePath , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_trans_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Transform , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans2D_obj_trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform2D , arg1 : * mut sys :: godot_object , arg2 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_trans (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Transform ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_i64_bool_bool_bool_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : i64 , arg3 : bool , arg4 : bool , arg5 : bool , arg6 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 , arg3 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : GodotString , arg3 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_bool_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : bool , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_rid_rect2_color_bool_rid_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : Rid , arg3 : Rect2 , arg4 : Color , arg5 : bool , arg6 : Rid , arg7 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 8usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_strarr_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < GodotString > , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_nodepath_var_obj_nodepath_f64_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : NodePath , arg2 : Variant , arg3 : * mut sys :: godot_object , arg4 : NodePath , arg5 : f64 , arg6 : i64 , arg7 : i64 , arg8 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 9usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : f64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__strarr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < GodotString > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_i64_i64_arr_i64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : i64 , arg2 : i64 , arg3 : VariantArray , arg4 : i64 , arg5 : bool , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_arr_arr_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : VariantArray , arg3 : VariantArray , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_arr_arr_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : VariantArray , arg2 : VariantArray , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_f64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : f64 , arg2 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__basis (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Basis ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_color_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : Color , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_trans2D_color_rid_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Transform2D , arg3 : Color , arg4 : Rid , arg5 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool_bool_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool , arg1 : bool , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_bool_i64_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : bool , arg3 : i64 , arg4 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_color_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Color , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_bool_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : bool , arg3 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_bool_f64_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : bool , arg2 : f64 , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans2D_vec2_obj_trans2D_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform2D , arg1 : Vector2 , arg2 : * mut sys :: godot_object , arg3 : Transform2D , arg4 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_rid_bool_color_bool_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : Rid , arg3 : bool , arg4 : Color , arg5 : bool , arg6 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_vec3_vec3_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Vector3 , arg3 : Vector3 , arg4 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_strarr_bool_arr_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < GodotString > , arg2 : bool , arg3 : VariantArray , arg4 : bool , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_trans (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : Transform ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < f32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_color_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Color , arg2 : f64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bytearr_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < u8 > , arg1 : GodotString , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__aabb (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Aabb ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bytearr_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < u8 > , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__var_var_f64_f64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Variant , arg1 : Variant , arg2 : f64 , arg3 : f64 , arg4 : i64 , arg5 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_rect2_bool_color_bool_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Rect2 , arg2 : bool , arg3 : Color , arg4 : bool , arg5 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = Variant :: from_object_ptr (arg5) ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_nodepath_obj_nodepath_var_f64_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : NodePath , arg2 : * mut sys :: godot_object , arg3 : NodePath , arg4 : Variant , arg5 : f64 , arg6 : i64 , arg7 : i64 , arg8 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 9usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : GodotString , arg3 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_var_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : Variant , arg3 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : f64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_vec3_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Vector3 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_str_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : GodotString , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_strarr_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : PoolArray < GodotString > , arg3 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : f64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_bool_f64_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : bool , arg3 : f64 , arg4 : i64 , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_i64_bool_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : i64 , arg3 : bool , arg4 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_var_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : Variant , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__quat (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Quat ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__var_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Variant , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_bool_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : bool , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_trans2D_vec2_bool_f64_obj_bool_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Transform2D , arg2 : Vector2 , arg3 : bool , arg4 : f64 , arg5 : * mut sys :: godot_object , arg6 : bool , arg7 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = Variant :: from_object_ptr (arg5) ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 8usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_var_var_f64_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : Variant , arg3 : Variant , arg4 : f64 , arg5 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2arr_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < Vector2 > , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_f64_f64_f64_bool_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : bool , arg6 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3arr_obj_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector3 > , arg1 : * mut sys :: godot_object , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_i64_f64_f64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : i64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_vec2_bool_i64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Vector2 , arg3 : bool , arg4 : i64 , arg5 : f64 , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_f64_f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : f64 , arg2 : f64 , arg3 : f64 , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_f64_str_var_var_var_var_var_var_var_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : f64 , arg2 : GodotString , arg3 : Variant , arg4 : Variant , arg5 : Variant , arg6 : Variant , arg7 : Variant , arg8 : Variant , arg9 : Variant , arg10 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let arg9 : Variant = (& arg9) . to_variant () ; let arg10 : Variant = (& arg10) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 11usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _ , arg9 . sys () as * const _ , arg10 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; drop (arg9) ; drop (arg10) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_vec2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : Vector2 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_vec3_quat_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : Vector3 , arg3 : Quat , arg4 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bool_i64_color_bool_i64_color_obj_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : bool , arg2 : i64 , arg3 : Color , arg4 : bool , arg5 : i64 , arg6 : Color , arg7 : * mut sys :: godot_object , arg8 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = Variant :: from_object_ptr (arg7) ; let arg8 : Variant = Variant :: from_object_ptr (arg8) ; let mut argument_buffer : [* const sys :: godot_variant ; 9usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : f64 , arg3 : f64 , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_f64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : f64 , arg2 : i64 , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_f64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : f64 , arg2 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_f64_i64_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : f64 , arg3 : i64 , arg4 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = Variant :: from_object_ptr (arg4) ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_i64_arr_i64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : i64 , arg2 : VariantArray , arg3 : i64 , arg4 : bool , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_vec2_color_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : Vector2 , arg3 : Color , arg4 : f64 , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_vec2_color_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Vector2 , arg2 : Color , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_f64_bool_f64_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : f64 , arg3 : bool , arg4 : f64 , arg5 : i64 , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__var_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Variant , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_trans (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Transform ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_str_arr_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : GodotString , arg3 : VariantArray , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : f64 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_obj_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : * mut sys :: godot_object , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_rid_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Rid , arg3 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_f64_f64_f64_i64_color_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : f64 , arg2 : f64 , arg3 : f64 , arg4 : i64 , arg5 : Color , arg6 : f64 , arg7 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 8usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_trans_vec3_bool_obj_bool_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Transform , arg2 : Vector3 , arg3 : bool , arg4 : * mut sys :: godot_object , arg5 : bool , arg6 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = Variant :: from_object_ptr (arg4) ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_var_obj_str_f64_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : Variant , arg3 : * mut sys :: godot_object , arg4 : GodotString , arg5 : f64 , arg6 : i64 , arg7 : i64 , arg8 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 9usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_vec2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Vector2 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_f64_f64_f64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__dict_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Dictionary , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool_vec2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool , arg1 : Vector2 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_f64_f64_f64_f64_f64_f64_f64_color_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : f64 , arg8 : f64 , arg9 : Color , arg10 : i64 , arg11 : i64 , arg12 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let arg9 : Variant = (& arg9) . to_variant () ; let arg10 : Variant = (& arg10) . to_variant () ; let arg11 : Variant = (& arg11) . to_variant () ; let arg12 : Variant = (& arg12) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 13usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _ , arg9 . sys () as * const _ , arg10 . sys () as * const _ , arg11 . sys () as * const _ , arg12 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; drop (arg9) ; drop (arg10) ; drop (arg11) ; drop (arg12) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_str_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : GodotString , arg2 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__strarr_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < GodotString > , arg1 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : f64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : i64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvarargs__i64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , varargs : & [Variant]) -> Variant { let gd_api = get_api () ; let mut argument_buffer : std :: vec :: Vec < * const sys :: godot_variant > = std :: vec :: Vec :: with_capacity (2usize + varargs . len ()) ; let arg0 : Variant = (& arg0) . to_variant () ; argument_buffer . push (arg0 . sys ()) ; let arg1 : Variant = (& arg1) . to_variant () ; argument_buffer . push (arg1 . sys ()) ; for arg in varargs { argument_buffer . push (arg . sys () as * const _) ; } let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_arr_i64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : VariantArray , arg3 : i64 , arg4 : bool , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : bool , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_rect2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : Rect2 , arg3 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_f64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : f64 , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3arr_plane (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector3 > , arg1 : Plane ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec3_vec3_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector3 , arg2 : Vector3 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_vec3_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Vector3 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_rect2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Rect2 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_color_bool_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Color , arg2 : bool , arg3 : bool , arg4 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_var_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : Variant , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rect2_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rect2 , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_vec2arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < Vector2 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_vec2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Vector2 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_vec2_str_color_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Vector2 , arg2 : GodotString , arg3 : Color , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_strarr_bool_i64_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < GodotString > , arg2 : bool , arg3 : i64 , arg4 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_i64_bool_bool_bool_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : i64 , arg2 : bool , arg3 : bool , arg4 : bool , arg5 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_f32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < f32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3arr_vec2arr_colorarr_vec2arr_vec3arr_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector3 > , arg1 : PoolArray < Vector2 > , arg2 : PoolArray < Color > , arg3 : PoolArray < Vector2 > , arg4 : PoolArray < Vector3 > , arg5 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : PoolArray < Vector2 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < i32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : GodotString , arg3 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bytearr_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < u8 > , arg1 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__arr_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : VariantArray , arg1 : * mut sys :: godot_object , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_arr_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : VariantArray , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_nodepath_var_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : NodePath , arg2 : Variant , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : bool , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : i64 , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_str_str_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : GodotString , arg3 : GodotString , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__colorarr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Color > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_f64_f64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : f64 , arg2 : f64 , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_var_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Variant , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_vec3_bool_i64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Vector3 , arg3 : bool , arg4 : i64 , arg5 : f64 , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_str_color_i64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : GodotString , arg3 : Color , arg4 : i64 , arg5 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_vec3_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Vector3 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_f64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : f64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : GodotString , arg3 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__var_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Variant , arg1 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rect2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rect2 , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_trans_rid_trans (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Transform , arg2 : Rid , arg3 : Transform ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : bool , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_vec2_str_str_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Vector2 , arg2 : GodotString , arg3 : GodotString , arg4 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_color_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : Color , arg2 : f64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_vec2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : Vector2 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_f64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : f64 , arg3 : f64 , arg4 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2arr_colorarr_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < Vector2 > , arg2 : PoolArray < Color > , arg3 : f64 , arg4 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i32arr_vec2arr_colorarr_vec2arr_i32arr_f32arr_rid_i64_rid_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < i32 > , arg2 : PoolArray < Vector2 > , arg3 : PoolArray < Color > , arg4 : PoolArray < Vector2 > , arg5 : PoolArray < i32 > , arg6 : PoolArray < f32 > , arg7 : Rid , arg8 : i64 , arg9 : Rid , arg10 : bool , arg11 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let arg9 : Variant = (& arg9) . to_variant () ; let arg10 : Variant = (& arg10) . to_variant () ; let arg11 : Variant = (& arg11) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 12usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _ , arg9 . sys () as * const _ , arg10 . sys () as * const _ , arg11 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; drop (arg9) ; drop (arg10) ; drop (arg11) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < i32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_f64_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : f64 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_rid_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Rid , arg2 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bytearr_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < u8 > , arg2 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvarargs__str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , varargs : & [Variant]) -> Variant { let gd_api = get_api () ; let mut argument_buffer : std :: vec :: Vec < * const sys :: godot_variant > = std :: vec :: Vec :: with_capacity (1usize + varargs . len ()) ; let arg0 : Variant = (& arg0) . to_variant () ; argument_buffer . push (arg0 . sys ()) ; for arg in varargs { argument_buffer . push (arg . sys () as * const _) ; } let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_color_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Color , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvarargs__str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , varargs : & [Variant]) -> Variant { let gd_api = get_api () ; let mut argument_buffer : std :: vec :: Vec < * const sys :: godot_variant > = std :: vec :: Vec :: with_capacity (2usize + varargs . len ()) ; let arg0 : Variant = (& arg0) . to_variant () ; argument_buffer . push (arg0 . sys ()) ; let arg1 : Variant = (& arg1) . to_variant () ; argument_buffer . push (arg1 . sys ()) ; for arg in varargs { argument_buffer . push (arg . sys () as * const _) ; } let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_trans2D_bool_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : Transform2D , arg3 : bool , arg4 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : bool , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__nodepath_f32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : NodePath , arg1 : PoolArray < f32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2arr_colorarr_vec2arr_rid_f64_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < Vector2 > , arg2 : PoolArray < Color > , arg3 : PoolArray < Vector2 > , arg4 : Rid , arg5 : f64 , arg6 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_plane (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Plane ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_colorarr_vec2arr_obj_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : PoolArray < Color > , arg2 : PoolArray < Vector2 > , arg3 : * mut sys :: godot_object , arg4 : * mut sys :: godot_object , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let arg4 : Variant = Variant :: from_object_ptr (arg4) ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : bool , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rect2_color_bool_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rect2 , arg1 : Color , arg2 : bool , arg3 : f64 , arg4 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_f64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : f64 , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_bool_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : bool , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar_ (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let mut argument_buffer : [* const sys :: godot_variant ; 0usize] = [] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_rect2_rect2_color_bool_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Rect2 , arg2 : Rect2 , arg3 : Color , arg4 : bool , arg5 : * mut sys :: godot_object , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = Variant :: from_object_ptr (arg5) ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : i64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_i64_i64_color_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : i64 , arg3 : i64 , arg4 : Color , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans_vec3_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform , arg1 : Vector3 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_bool_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : bool , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_strarr_bool_i64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < GodotString > , arg2 : bool , arg3 : i64 , arg4 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_rect2_color_bool_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : Rect2 , arg3 : Color , arg4 : bool , arg5 : * mut sys :: godot_object , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = Variant :: from_object_ptr (arg5) ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_nodepath_var_var_f64_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : NodePath , arg2 : Variant , arg3 : Variant , arg4 : f64 , arg5 : i64 , arg6 : i64 , arg7 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 8usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_obj_i64_i64_i64_i64_i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : * mut sys :: godot_object , arg2 : i64 , arg3 : i64 , arg4 : i64 , arg5 : i64 , arg6 : i64 , arg7 : i64 , arg8 : i64 , arg9 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let arg9 : Variant = (& arg9) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 10usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _ , arg9 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; drop (arg9) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_plane (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Plane ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_strarr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < GodotString > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_rid_i64_rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Rid , arg3 : i64 , arg4 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_var_var_f64_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : Variant , arg3 : Variant , arg4 : f64 , arg5 : i64 , arg6 : i64 , arg7 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 8usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f32arr_f32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < f32 > , arg1 : PoolArray < f32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__arr_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : VariantArray , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : i64 , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__var_str_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Variant , arg1 : GodotString , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__nodepath_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : NodePath , arg1 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_str_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : GodotString , arg3 : i64 , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_strarr_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < GodotString > , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bool_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : bool , arg2 : GodotString , arg3 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__dict (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Dictionary ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvarargs_ (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , varargs : & [Variant]) -> Variant { let gd_api = get_api () ; let mut argument_buffer : std :: vec :: Vec < * const sys :: godot_variant > = std :: vec :: Vec :: with_capacity (0usize + varargs . len ()) ; for arg in varargs { argument_buffer . push (arg . sys () as * const _) ; } let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_color_color_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : Color , arg3 : Color , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_rect2_vec2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : Rect2 , arg3 : Vector2 , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_f64_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : f64 , arg2 : f64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : GodotString , arg3 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec3_rid_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector3 , arg2 : Rid , arg3 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2arr_colorarr_vec2arr_rid_rid_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < Vector2 > , arg2 : PoolArray < Color > , arg3 : PoolArray < Vector2 > , arg4 : Rid , arg5 : Rid , arg6 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_f64_f64_bool_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : f64 , arg2 : f64 , arg3 : bool , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__nodepath_obj_i64_rect2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : NodePath , arg1 : * mut sys :: godot_object , arg2 : i64 , arg3 : Rect2 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rect2_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rect2 , arg1 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_obj_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : * mut sys :: godot_object , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : i64 , arg3 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_var_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Variant , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : GodotString , arg3 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_obj_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : * mut sys :: godot_object , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_vec2arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : PoolArray < Vector2 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_obj_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : * mut sys :: godot_object , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : PoolArray < Vector2 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_f64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : f64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__arr_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : VariantArray , arg1 : bool , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_i32arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : PoolArray < i32 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_bool_i64_f64_f64_f64_i64_f64_f64_f64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : bool , arg2 : i64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : i64 , arg7 : f64 , arg8 : f64 , arg9 : f64 , arg10 : bool , arg11 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let arg9 : Variant = (& arg9) . to_variant () ; let arg10 : Variant = (& arg10) . to_variant () ; let arg11 : Variant = (& arg11) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 12usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _ , arg9 . sys () as * const _ , arg10 . sys () as * const _ , arg11 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; drop (arg9) ; drop (arg10) ; drop (arg11) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_nodepath (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : NodePath ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_var_str_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Variant , arg2 : GodotString , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec3_vec3_bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector3 , arg2 : Vector3 , arg3 : bool , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_f64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : f64 , arg2 : f64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_obj_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : * mut sys :: godot_object , arg3 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_strarr_bool_strarr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : PoolArray < GodotString > , arg2 : bool , arg3 : PoolArray < GodotString > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__nodepath (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : NodePath ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_color_bool_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : Color , arg3 : bool , arg4 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = Variant :: from_object_ptr (arg4) ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_f64_color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : f64 , arg3 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_bool_i64_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : bool , arg3 : i64 , arg4 : f64 , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_vec2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Vector2 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bytearr_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < u8 > , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_f64_vec2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : f64 , arg3 : Vector2 , arg4 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_f64_vec2_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : f64 , arg2 : Vector2 , arg3 : f64 , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_rect2_rid_vec2_vec2_i64_i64_bool_color_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : Rect2 , arg3 : Rid , arg4 : Vector2 , arg5 : Vector2 , arg6 : i64 , arg7 : i64 , arg8 : bool , arg9 : Color , arg10 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let arg9 : Variant = (& arg9) . to_variant () ; let arg10 : Variant = (& arg10) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 11usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _ , arg9 . sys () as * const _ , arg10 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; drop (arg9) ; drop (arg10) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_var_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Variant , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_vec2_bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : Vector2 , arg3 : bool , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__color (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Color ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 1usize] = [arg0 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : i64 , arg3 : i64 , arg4 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_trans2D (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Transform2D ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_bool_str_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : bool , arg2 : GodotString , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans2D_vec2_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform2D , arg1 : Vector2 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : f64 , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : bool , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_strarr_bytearr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : PoolArray < GodotString > , arg3 : PoolArray < u8 > ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_f64_obj_f64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : f64 , arg2 : * mut sys :: godot_object , arg3 : f64 , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__bytearr_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < u8 > , arg1 : i64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_trans (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : Transform ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rect2_bool_color_bool_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rect2 , arg2 : bool , arg3 : Color , arg4 : bool , arg5 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = Variant :: from_object_ptr (arg5) ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2arr_color_vec2arr_obj_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : PoolArray < Vector2 > , arg1 : Color , arg2 : PoolArray < Vector2 > , arg3 : * mut sys :: godot_object , arg4 : * mut sys :: godot_object , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let arg4 : Variant = Variant :: from_object_ptr (arg4) ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : i64 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector2 , arg2 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvarargs__i64_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : GodotString , varargs : & [Variant]) -> Variant { let gd_api = get_api () ; let mut argument_buffer : std :: vec :: Vec < * const sys :: godot_variant > = std :: vec :: Vec :: with_capacity (3usize + varargs . len ()) ; let arg0 : Variant = (& arg0) . to_variant () ; argument_buffer . push (arg0 . sys ()) ; let arg1 : Variant = (& arg1) . to_variant () ; argument_buffer . push (arg1 . sys ()) ; let arg2 : Variant = (& arg2) . to_variant () ; argument_buffer . push (arg2 . sys ()) ; for arg in varargs { argument_buffer . push (arg . sys () as * const _) ; } let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_obj_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : * mut sys :: godot_object , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_vec3 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Vector3 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_bool_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : bool , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec3_vec3_arr_i64_bool_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector3 , arg1 : Vector3 , arg2 : VariantArray , arg3 : i64 , arg4 : bool , arg5 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 6usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_vec2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Vector2 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_str_obj_str_var_f64_i64_i64_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , arg2 : * mut sys :: godot_object , arg3 : GodotString , arg4 : Variant , arg5 : f64 , arg6 : i64 , arg7 : i64 , arg8 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let arg7 : Variant = (& arg7) . to_variant () ; let arg8 : Variant = (& arg8) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 9usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _ , arg7 . sys () as * const _ , arg8 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; drop (arg7) ; drop (arg8) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvarargs__obj_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : GodotString , varargs : & [Variant]) -> Variant { let gd_api = get_api () ; let mut argument_buffer : std :: vec :: Vec < * const sys :: godot_variant > = std :: vec :: Vec :: with_capacity (2usize + varargs . len ()) ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; argument_buffer . push (arg0 . sys ()) ; let arg1 : Variant = (& arg1) . to_variant () ; argument_buffer . push (arg1 . sys ()) ; for arg in varargs { argument_buffer . push (arg . sys () as * const _) ; } let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_vec2_rid_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Vector2 , arg3 : Rid , arg4 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_str_str_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : GodotString , arg3 : GodotString , arg4 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bool_bool_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : bool , arg2 : bool , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_f64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : f64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : i64 , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_str_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : GodotString , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_trans_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : Transform , arg2 : f64 , arg3 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : GodotString , arg2 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 , arg3 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bytearr_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : PoolArray < u8 > , arg2 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_vec2_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Vector2 , arg3 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_bool_obj_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : bool , arg2 : * mut sys :: godot_object , arg3 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = Variant :: from_object_ptr (arg2) ; let arg3 : Variant = Variant :: from_object_ptr (arg3) ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_str_arr (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : GodotString , arg2 : VariantArray ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_obj (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : * mut sys :: godot_object ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = Variant :: from_object_ptr (arg1) ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_rect2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Rect2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_i64_var (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : i64 , arg2 : Variant ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__obj_vec2_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : * mut sys :: godot_object , arg1 : Vector2 , arg2 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = Variant :: from_object_ptr (arg0) ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__trans2D_vec2 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Transform2D , arg1 : Vector2 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 2usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__i64_bool_nodepath (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : i64 , arg1 : bool , arg2 : NodePath ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_rid_rid_rid (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : Rid , arg2 : Rid , arg3 : Rid ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 3usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__rid_i64_i64_i64_i64_i64_i64 (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Rid , arg1 : i64 , arg2 : i64 , arg3 : i64 , arg4 : i64 , arg5 : i64 , arg6 : i64 ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let arg5 : Variant = (& arg5) . to_variant () ; let arg6 : Variant = (& arg6) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 7usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _ , arg5 . sys () as * const _ , arg6 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; drop (arg5) ; drop (arg6) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__str_f64_str_str (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : GodotString , arg1 : f64 , arg2 : GodotString , arg3 : GodotString ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 4usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; Variant :: from_sys (ret) } # [doc (hidden)] # [inline (never)] pub (crate) unsafe fn icallvar__vec2_vec2_color_f64_bool (method_bind : * mut sys :: godot_method_bind , obj_ptr : * mut sys :: godot_object , arg0 : Vector2 , arg1 : Vector2 , arg2 : Color , arg3 : f64 , arg4 : bool ,) -> Variant { let gd_api = get_api () ; let arg0 : Variant = (& arg0) . to_variant () ; let arg1 : Variant = (& arg1) . to_variant () ; let arg2 : Variant = (& arg2) . to_variant () ; let arg3 : Variant = (& arg3) . to_variant () ; let arg4 : Variant = (& arg4) . to_variant () ; let mut argument_buffer : [* const sys :: godot_variant ; 5usize] = [arg0 . sys () as * const _ , arg1 . sys () as * const _ , arg2 . sys () as * const _ , arg3 . sys () as * const _ , arg4 . sys () as * const _] ; let ret = (gd_api . godot_method_bind_call) (method_bind , obj_ptr , argument_buffer . as_mut_ptr () , argument_buffer . len () as _ , ptr :: null_mut ()) ; drop (arg0) ; drop (arg1) ; drop (arg2) ; drop (arg3) ; drop (arg4) ; Variant :: from_sys (ret) }